// Generated by Dolo
// Model basename : DS2009


var Y_1,Y_2,W_1,C_1,C_2,r_1,r_2,R_1,R_2,P_1,P_2,M_1,M_2,D,alpha_1_2,rho_1,rho_2,rx;

varexo epsY_1,epsY_2,epsM_1,epsM_2,xi;

parameters z_Y,z_M,gam,beta;
gam = 2.0;
z_Y = 0.9;
z_M = 0.9;
beta = 0.96;


model;


// eq 1 : Money quantity relation
[ name = 'Money quantity relation' ]
M_1 = P_1*Y_1;


// eq 2 : Endowment process
[ name = 'Endowment process' ]
log(Y_1) = z_Y*log(Y_1(-1)) + epsY_1;


// eq 3 : Money process
[ name = 'Money process' ]
log(M_1) = z_M*log(M_1(-1)) + epsM_1;


// eq 4 : Stochastic discount factor
[ name = 'Stochastic discount factor' ]
rho_1 = C_1(-1)^gam*C_1^(-gam)*beta;


// eq 5 : Return
[ name = 'Return' , mblock = 'returns' ]
r_1 = (P_1(-1)/P_1)*R_1(-1);


// eq 6 : Intertemporal euler equation
[ name = 'Intertemporal euler equation' ]
P_1/P_1(+1)*rho_1(1) = 1/R_1;


// eq 7 : Money quantity relation
[ name = 'Money quantity relation' ]
M_2 = P_2*Y_2;


// eq 8 : Endowment process
[ name = 'Endowment process' ]
log(Y_2) = z_Y*log(Y_2(-1)) + epsY_2;


// eq 9 : Money process
[ name = 'Money process' ]
log(M_2) = z_M*log(M_2(-1)) + epsM_2;


// eq 10 : Stochastic discount factor
[ name = 'Stochastic discount factor' ]
rho_2 = C_2(-1)^gam*C_2^(-gam)*beta;

// eq 11 : Return
[ name = 'Return' , mblock = 'returns' ]
r_2 = (P_2(-1)/P_2)*R_2(-1);


// eq 12 : Intertemporal euler equation
[ name = 'Intertemporal euler equation' ]
P_2/P_2(+1)*rho_2(1) = 1/R_2;


// eq 13
[ mblock = 'Budget constraint' ,  xi = 'xi']
C_1 = -W_1 + W_1(-1)*r_1 + alpha_1_2(-1)*rx + xi +  Y_1;


// eq 14 : Market clearing for goods
[ name = 'Market clearing for goods' ]
C_1 + C_2 = Y_1 + Y_2;


// eq 15 : Euler equation
[ name = 'Euler equation' ]
r_1(1) = r_2(1);


// eq 16 : Excess return
[ name = 'Excess return' ]
rx = -r_1 + r_2;


// eq 17 : Global stochastic discount factor
[ name = 'Global stochastic discount factor' ]
D = -rho_1 + rho_2;

// eq 18
[ portfolio = 'alpha_1_2' ]
D(+1) * rx(+1) = 0;
//alpha_1_2 = 0;




end;

initval;
C_2 = 1;
C_1 = 1;
P_1 = 1;
P_2 = 1;
Y_2 = 1;
M_2 = 1;
Y_1 = 1;
M_1 = 1;
R_2 = 1/beta;
r_1 = 1/beta;
rho_2 = beta;
rho_1 = beta;
r_2 = 1/beta;
R_1 = 1/beta;
//x_1_2 = alpha_1_2 / P_2;
end;

shocks;
var epsY_1 = 0.00100000000000000 ;
var epsY_2 = 0.00100000000000000 ;
var epsM_1 = 0.00100000000000000 ;
var epsM_2 = 0.00100000000000000 ;
end;


portfolios_setup;

stoch_simul(order=2, irf=40);

//close all;

//stoch_simul(order=1);

